<!DOCTYPE HTML>
<html>
<head>

 <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
 <title>Using the QuickStart Guide</title>

 <meta name="generator" content="Adobe RoboHelp 2015" />
 <meta name="Originator" content="ImportMif" />
 <meta name="OriginalFile" content="s:\techpubs\productdocs\ControlCenter\CC_8_6_2\FrameMakerSourceFiles\CC_OPN_OPL_And_CloudAzHelp\UsingControlCenter\QuickstartSAAS.fm" />
 <link rel="stylesheet" href="QuickstartSAAS.css" type="text/css" />

 <link rel="stylesheet" href="../../RHStyleMapping.css" type="text/css" />
 <link rel="StyleSheet" href="../../RHStyleMapping.css" type="text/css" />

<script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
p.WebHelpNavBar { text-align:right; }
-->
</style>

<script type="text/javascript" src="../../template/scripts/rh.min.js"></script>
<script type="text/javascript" src="../../template/scripts/common.min.js"></script>
<script type="text/javascript" src="../../template/scripts/topic.min.js"></script>
<script type="text/javascript" src="../../template/scripts/constants.js"></script>
<script type="text/javascript" src="../../template/scripts/utils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhutils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhlang.js"></script>
<script type="text/javascript" src="../../template/scripts/mhver.js"></script>
<script type="text/javascript" src="../../template/scripts/settings.js"></script>
<script type="text/javascript" src="../../template/scripts/XmlJsReader.js"></script>
<script type="text/javascript" src="../../template/scripts/loadparentdata.js"></script>
<script type="text/javascript" src="../../template/scripts/loadscreen.js"></script>
<script type="text/javascript" src="../../template/scripts/loadprojdata.js"></script>
<script type="text/javascript" src="../../template/scripts/mhtopic.js"></script>
 <link rel="stylesheet" type="text/css" href="../../template/styles/topic.min.css">
<script type="text/javascript" >
gRootRelPath = "../..";
gCommonRootRelPath = "../..";
gTopicId = "1.1";
</script>
 <meta name="topic-breadcrumbs" content="QuickStart Guide" />
</head>

<body dir="ltr">
<script type="text/javascript" src="../../ehlpdhtm.js"></script>

 <h1 dir="ltr">Using the QuickStart Guide</h1>
 <p dir="ltr" class="FM_Body">The QuickStart Guide explains how to use sample ABAC (Attribute Based Access Control) policies and configure a sample application to make authorization requests in NextLabs Cloud Authoriza&#173;tion Service. This service is referred to as CloudAz. You access the QuickStart Guide from the <span class="FM_Emphasis">Help</span> section of the CloudAz console.</p>
 <p dir="ltr" class="FM_Heading1PartSection"><a name="TOC_QuickStart_objectives"></a><span style="font-family : 'Trebuchet MS'; font-weight : normal; font-size  : 10.0pt; color   : #0000ff; "></span><a name="XREF_34088_QuickStart"></a>QuickStart objectives</p>
 <p dir="ltr" class="FM_Body">After completing the QuickStart Guide, you will:</p>
 <p dir="ltr" class="FM_Bulleted">•<span style="padding-left: 7pt;" class="FMAutoNumber_1"></span>Understand the basics of ABAC (Attribute Based Access Control) and CloudAz</p>
 <p dir="ltr" class="FM_Bulleted">•<span style="padding-left: 7pt;" class="FMAutoNumber_1"></span>Understand how a simple authorization policy is used in CloudAz</p>
 <p dir="ltr" class="FM_Bulleted">•<span style="padding-left: 7pt;" class="FMAutoNumber_1"></span>Be able to perform a simple authorization using CloudAz<a name="XREF_74011_Brief_introduction"></a></p>
 <p dir="ltr" class="FM_Heading1Preface"><a name="TOC_Before_you_begin"></a><a name="XREF_44850_Before_you_begin"></a>Before you begin</p>
 <p dir="ltr" class="FM_Body">To use the QuickStart Guide example, you need to import sample ABAC policies into your CloudAz instance. The sample policies are for authorization in a typical Support ticket system. There are three authorization rules to be enforced by the Support ticket system:</p>
 <p dir="ltr" class="FM_Bulleted">•<span style="padding-left: 7pt;" class="FMAutoNumber_1"></span>Allow support representatives to edit and reassign tickets that belong to their product area</p>
 <p dir="ltr" class="FM_Bulleted" style="font-family : Calibri; font-size  : 11.0pt;">•<span style="padding-left: 7pt;" class="FMAutoNumber_1"></span>Allow users from the IT department to view all support tickets</p>
 <p dir="ltr" class="FM_Bulleted">•<span style="padding-left: 7pt;" class="FMAutoNumber_1"></span>Deny access to security vulnerabilities if they are not created by or assigned to the user</p>
 <p dir="ltr" class="FM_Heading2Preface"><a name="TOC_Import_the_sample_ABAC"></a>Import the sample ABAC policies</p>
 <p dir="ltr" class="FM_Body">To see how policies are used to control authorization, import the sample ABAC policies from the CloudAz Help page.</p>
 <p dir="ltr" class="FM_HeadingProcedure">Procedure</p>
 <p dir="ltr" class="FM_NumBody1"><span style="padding-left: 5pt;" class="FMAutoNumber_1"></span>1 <span style="padding-left: 13pt;" class="FMAutoNumber_2"></span>Click the <span class="FM_Bold">Import sample policies</span>&#160;link on the in-product version of the QuickStart Guide. To access the in-product QuickStart Guide, click <span class="FM_UIControl">Getting Started </span>under the Help icon in the upper right of the CloudAz console, then click the <span class="FM_UIControl">QuickStart</span> link.</p>
 <p dir="ltr" class="FM_NumBody"><span style="padding-left: 5pt;" class="FMAutoNumber_1"></span>2<span style="padding-left: 16pt;" class="FMAutoNumber_2"></span>In the CloudAz console, click <span class="FM_UIControl">Policies</span>. The imported policies appear on the <span class="FM_Emphasis">Policy Manage&#173;ment</span> page.</p>
 <p dir="ltr" class="FM_NumBody"><span style="padding-left: 5pt;" class="FMAutoNumber_1"></span>3<span style="padding-left: 16pt;" class="FMAutoNumber_2"></span>Verify that the imported policies are in the <span class="FM_Emphasis">Deployed</span>&#160;state so that they are ready to be used in the QuickStart example. See <a href="#XREF_11744_Policies_in_the"><span class="FM_blue">Figure&nbsp;1-1</span></a>.</p>
 <div align="center"><img alt="DeployedPolicies.png" style=" width:100%; margin-left:5.250pt; margin-top:5.250pt; margin-right:6.000pt; margin-bottom:6.000pt; max-width:423.000pt;" id="image0" src="DeployedPolicies.png" />
 </div>
 <p dir="ltr" class="FM_AnchorFrame">&nbsp;</p>
 <p dir="ltr" class="FM_FigureWide">Figure 1-1: <a name="XREF_11744_Policies_in_the"></a>Imported policies in the Deployed state</p>
 <p dir="ltr" class="FM_Heading1Preface"><a name="TOC_Run_the_application_and"></a><a name="XREF_75732_Run_the"></a>Run the application and send an authorization request</p>
 <p dir="ltr" class="FM_Body">After you have imported the sample policies, you can run one of the provided sample applica&#173;tions, which sends a set of authorization requests to the CloudAz REST API. CloudAz evaluates each authorization request against the imported sample policies; calculates a decision, allow, deny, or indeterminate; and returns the decision with an optional set of obligations. Obligations are additional instructions the sample application needs to perform before proceeding with the application logic. The sample application displays each set of request attributes and the response on-screen before proceeding to the next request.</p>
 <p dir="ltr" class="FM_Heading2Preface"><a name="TOC_Run_the_sample_Java"></a><a name="XREF_82108_Run_the_sample"></a>Run the sample Java application and send an authorization request</p>
 <p dir="ltr" class="FM_Body">After you have imported the sample policies, you can run the sample Java application and send an authorization request to the CloudAz REST API.</p>
 <p dir="ltr" class="FM_HeadingProcedure">Procedure</p>
 <p dir="ltr" class="FM_NumBody1"><span style="padding-left: 5pt;" class="FMAutoNumber_1"></span>1 <span style="padding-left: 13pt;" class="FMAutoNumber_2"></span>Set up the Java SDK with JDK 7 or higher. For instructions, go to <span class="FM_Hyperlink"><a href="http://docs.oracle.com/javase/7/docs/webnotes/install/">http://docs.oracle.com/javase/7/docs/webnotes/install/</a></span>.</p>
 <p dir="ltr" class="FM_NumBody"><span style="padding-left: 5pt;" class="FMAutoNumber_1"></span>2<span style="padding-left: 16pt;" class="FMAutoNumber_2"></span>Download the sample Java application from <span class="FM_Hyperlink"><a href="https://s3-us-west-2.amazonaws.com/nxtlbsrelease/Platform_SAAS/openAZ-pep/Nextlabs-OpenAZ-PEP.zip">https://s3-us-west-2.amazonaws.com/nxtlbsrelease/Platform_SAAS/openAZ-pep/Nextlabs-OpenAZ-PEP.zip</a></span>.</p>
 <p dir="ltr" class="FM_NumBody"><span style="padding-left: 5pt;" class="FMAutoNumber_1"></span>3<span style="padding-left: 16pt;" class="FMAutoNumber_2"></span>Extract the files from the downloaded package.</p>
 <p dir="ltr" class="FM_NumBody"><span style="padding-left: 5pt;" class="FMAutoNumber_1"></span>4<span style="padding-left: 16pt;" class="FMAutoNumber_2"></span>In the extracted folder, navigate to: <span class="FM_Filename">java/sample_code/config</span>.</p>
 <p dir="ltr" class="FM_Note"><span class="FM_Bold">Note:<span style="padding-left: 19pt;" class="FMAutoNumber_1"></span> </span>Files are extracted with the <span class="FM_Emphasis">Read-only </span>attribute set in their properties<span class="FM_Emphasis">. </span>To view or change file properties in Windows, right-click the file, then select <span class="FM_Emphasis">Proper&#173;ties</span>.<span class="FM_Emphasis">&#160;</span></p>
 <p dir="ltr" class="FM_NumBody"><span style="padding-left: 5pt;" class="FMAutoNumber_1"></span>5<span style="padding-left: 16pt;" class="FMAutoNumber_2"></span>Change the properties of the following file to make it editable, then open it in a text edi&#173;tor: <span class="FM_Filename">openaz-pep.properties.</span></p>
 <p dir="ltr" class="FM_NumBody"><span style="padding-left: 5pt;" class="FMAutoNumber_1"></span>6<span style="padding-left: 16pt;" class="FMAutoNumber_2"></span>Replace the following placeholders with the properties for your system and save the file:</p>
 <p dir="ltr" class="FM_Bulleted1">•<span style="padding-left: 7pt;" class="FMAutoNumber_1"></span><span class="FM_Variable">&lt;CloudAz REST API host&gt;</span>: The hostname of your CloudAz instance, which was pro&#173;vided in the <span class="FM_Emphasis">Welcome</span>&#160;email from NextLabs. For example: <br /><span class="FM_Code">nxlpmdemo-jpc.pm.nextlabs.solutions.</span></p>
 <p dir="ltr" class="FM_Bulleted1">•<span style="padding-left: 7pt;" class="FMAutoNumber_1"></span><span class="FM_Variable">&lt;client_id&gt;</span>: The API Client ID. For example, <span class="FM_Code">apiclient.</span></p>
 <p dir="ltr" class="FM_Bulleted1">•<span style="padding-left: 7pt;" class="FMAutoNumber_1"></span><span class="FM_Variable">&lt;client_secret&gt;</span>: The API Client Secret.</p>
 <p dir="ltr" class="FM_NumBody"><span style="padding-left: 5pt;" class="FMAutoNumber_1"></span>7<span style="padding-left: 16pt;" class="FMAutoNumber_2"></span>Send the sample authorization request: </p>
 <p dir="ltr" class="FM_NumBodySub">a<span style="padding-left: 4pt;" class="FMAutoNumber_1"></span>Open a Windows Command prompt or Linux terminal, and navigate to the following folder: <span class="FM_Code">java/sample_code</span>.</p>
 <p dir="ltr" class="FM_NumBodySub">b<span style="padding-left: 4pt;" class="FMAutoNumber_1"></span>Run one of the following scripts to send the request:</p>
 <p dir="ltr" class="FM_Bulleted2">- <span style="padding-left: 4pt;" class="FMAutoNumber_1"></span>Windows: <span class="FM_Filename">cloudaz_request.bat</span></p>
 <p dir="ltr" class="FM_Bulleted2">- <span style="padding-left: 4pt;" class="FMAutoNumber_1"></span>Linux: <span class="FM_Filename">cloudaz_request.sh</span></p>
 <p dir="ltr" class="FM_Body2">The response appears in the console. To learn more about the response, see <a href="#XREF_37768_How_the_sample">Runtime execution: Attributes, request, and response</a>.</p>
 <p dir="ltr" class="FM_Heading2Preface"><a name="TOC_Run_the_sample"></a><a name="XREF_85493_Run_the_sample"></a>Run the sample JavaScript application and send an authorization request</p>
 <p dir="ltr" class="FM_Body">After you have imported the sample policies, you can run the sample JavaScript application and send an authorization request to CloudAz REST API.</p>
 <p dir="ltr" class="FM_HeadingProcedure">Procedure</p>
 <p dir="ltr" class="FM_NumBody1"><span style="padding-left: 5pt;" class="FMAutoNumber_1"></span>1 <span style="padding-left: 13pt;" class="FMAutoNumber_2"></span>Set up the JavaScript SDK. For instructions, go to <span class="FM_Hyperlink"><a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></span>.</p>
 <p dir="ltr" class="FM_NumBody"><span style="padding-left: 5pt;" class="FMAutoNumber_1"></span>2<span style="padding-left: 16pt;" class="FMAutoNumber_2"></span>Verify that the JavaScript node version is 4.5 or higher, and the npm version is 3.10.6 or higher. To check the versions, use these commands: </p>
 <p dir="ltr" class="FM_Code2" style="font-size  : 10.0pt;"><span class="FM_Filename">node --version </span></p>
 <p dir="ltr" class="FM_Code2" style="font-size  : 10.0pt;"><span class="FM_Filename">npm --version</span></p>
 <p dir="ltr" class="FM_NumBody"><span style="padding-left: 5pt;" class="FMAutoNumber_1"></span>3<span style="padding-left: 16pt;" class="FMAutoNumber_2"></span>Download the sample JavaScript application from <span class="FM_Hyperlink"><a href="https://s3-us-west-2.amazonaws.com/nxtlbsrelease/Platform_SAAS/openAZ-pep/Nextlabs-OpenAZ-PEP.zip">https://s3-us-west-2.amazonaws.com/nxtlbsrelease/Platform_SAAS/openAZ-pep/Nextlabs-OpenAZ-PEP.zip</a></span>.</p>
 <p dir="ltr" class="FM_NumBody"><span style="padding-left: 5pt;" class="FMAutoNumber_1"></span>4<span style="padding-left: 16pt;" class="FMAutoNumber_2"></span>Extract the files from the downloaded package.</p>
 <p dir="ltr" class="FM_NumBody"><span style="padding-left: 5pt;" class="FMAutoNumber_1"></span>5<span style="padding-left: 16pt;" class="FMAutoNumber_2"></span>In the extracted folder, navigate to: <span class="FM_Filename">js/sample_code/config</span>.</p>
 <p dir="ltr" class="FM_Note"><span class="FM_Bold">Note:<span style="padding-left: 19pt;" class="FMAutoNumber_1"></span> </span>Files are extracted with the <span class="FM_Emphasis">Read-only </span>attribute set in their properties<span class="FM_Emphasis">. </span>To view or change file properties in Windows, right-click the file, then select <span class="FM_Emphasis">Proper&#173;ties</span>.<span class="FM_Emphasis">&#160;</span></p>
 <p dir="ltr" class="FM_NumBody"><span style="padding-left: 5pt;" class="FMAutoNumber_1"></span>6<span style="padding-left: 16pt;" class="FMAutoNumber_2"></span>Change the properties of the following file to make it editable, then open it in a text edi&#173;tor: <span class="FM_Code">openaz-pep.json</span><span class="FM_Filename">.</span></p>
 <p dir="ltr" class="FM_NumBody"><span style="padding-left: 5pt;" class="FMAutoNumber_1"></span>7<span style="padding-left: 16pt;" class="FMAutoNumber_2"></span>Replace the following placeholders with the properties for your system and save the file:</p>
 <p dir="ltr" class="FM_Bulleted1">•<span style="padding-left: 7pt;" class="FMAutoNumber_1"></span><span class="FM_Variable">&lt;CloudAz REST API host&gt;</span>: The hostname of your CloudAz instance, which was pro&#173;vided in the <span class="FM_Emphasis">Welcome</span>&#160;email from NextLabs. For example: <br /><span class="FM_Code">nxlpmdemo-jpc.pm.nextlabs.solutions.</span></p>
 <p dir="ltr" class="FM_Bulleted1">•<span style="padding-left: 7pt;" class="FMAutoNumber_1"></span><span class="FM_Variable">&lt;client_id&gt;</span>: The API Client ID. For example, <span class="FM_Code">apiclient.</span></p>
 <p dir="ltr" class="FM_Bulleted1">•<span style="padding-left: 7pt;" class="FMAutoNumber_1"></span><span class="FM_Variable">&lt;client_secret&gt;</span>: The API Client Secret.</p>
 <p dir="ltr" class="FM_NumBody"><span style="padding-left: 5pt;" class="FMAutoNumber_1"></span>8<span style="padding-left: 16pt;" class="FMAutoNumber_2"></span>Open a Windows Command prompt or Linux terminal, and navigate to the following folder: <span class="FM_Filename">js/sample_code</span>.</p>
 <p dir="ltr" class="FM_NumBody"><span style="padding-left: 5pt;" class="FMAutoNumber_1"></span>9<span style="padding-left: 16pt;" class="FMAutoNumber_2"></span>Send the sample authorization request by running one of the following scripts:</p>
 <p dir="ltr" class="FM_Bulleted1">•<span style="padding-left: 7pt;" class="FMAutoNumber_1"></span>Windows: <span class="FM_Code">cloudaz_request.bat</span></p>
 <p dir="ltr" class="FM_Bulleted1">•<span style="padding-left: 7pt;" class="FMAutoNumber_1"></span>Linux: <span class="FM_Code">cloudaz_request.sh</span></p>
 <p dir="ltr" class="FM_Body2">The response appears in the console. To learn more about the response, see <a href="#XREF_37768_How_the_sample">Runtime execution: Attributes, request, and response</a>.</p>

 <p dir="ltr" class="FM_Heading1Preface"><a name="TOC_About_the_sample"></a><a name="XREF_45846_About_the_sample"></a>About the sample application</p>
 <p dir="ltr" class="FM_Body">The sample application is a generic Helpdesk Support ticket application included in the CloudAz QuickStart Guide for demonstration purposes. You can download and run this application to learn how the CloudAz authorization service uses ABAC policies to control access to resources and user interface elements in a typical application.</p>
 <p dir="ltr" class="FM_Body">The sample application demonstrates a simple scenario where users access a Helpdesk applica&#173;tion to view and manage support tickets. Users should only be able to view, edit, and reassign a subset of the support tickets in the Helpdesk system based on their product assignment, depart&#173;ment, and issue category. The sample application code only illustrates the runtime interaction between an application, such as a Helpdesk application, and the CloudAz system to determine what support tickets a user is allowed or not allowed access and does not include a user inter&#173;face.</p>
 <p dir="ltr" class="FM_Heading2Preface"><a name="TOC_High_level_flow_and"></a>High-level flow and terminology</p>
 <p dir="ltr" class="FM_Body">In the QuickStart example, the Helpdesk sample application issues REST-based authorization requests to the CloudAz authorization service, illustrating what happens when users attempt to view, edit, or reassign Support tickets using the Helpdesk application. The CloudAz policy engine, also known as the Policy Decision Point, or PDP for short, evaluates these authorization requests against the sample policies defined in the CloudAz system. The PDP returns authorization deci&#173;sions that state whether access should be allowed or denied. These decisions are based on the attributes of Support tickets and the attributes of users, such as department and product area assignment.</p>
 <p dir="ltr" class="FM_Body">Applications such as the Helpdesk sample application are known as Policy Enforcement Points, or PEPs for short. In a real-world setting, the Helpdesk application (PEP) would enforce authoriza&#173;tion decisions returned from the CloudAz service, (PDP), by showing only the authorized set of tickets in the Helpdesk user interface, and controlling the operations users can perform as required by policies.</p>
 <p dir="ltr" class="FM_Heading2Preface"><a name="TOC_Runtime_execution"></a><a name="XREF_37768_How_the_sample"></a>Runtime execution: Attributes, request, and response</p>
 <p dir="ltr" class="FM_Body">After you've imported the sample authorization policies and downloaded the Helpdesk sample application, you can run the application to see how it interacts with the CloudAz service. Let's walk through the runtime interactions: </p>
 <p dir="ltr" class="FM_Note"><span class="FM_Bold">Note:<span style="padding-left: 19pt;" class="FMAutoNumber_1"></span> </span>Interactions are the same for both the Java and JavaScript sample applica&#173;tions.</p>
 <p dir="ltr" class="FM_NumBody1"><span style="padding-left: 5pt;" class="FMAutoNumber_1"></span>1 <span style="padding-left: 13pt;" class="FMAutoNumber_2"></span>The user performs an action in the Helpdesk sample application, such as viewing, editing, or reassigning a Support ticket.</p>
 <p dir="ltr" class="FM_NumBody"><span style="padding-left: 5pt;" class="FMAutoNumber_1"></span>2<span style="padding-left: 16pt;" class="FMAutoNumber_2"></span>The Helpdesk sample application intercepts the event, the user action, and prepares an authorization request by collecting user, resource, and environment attributes. The Clou&#173;dAz policy engine uses these attributes to determine whether the user should be allowed to perform the action. Attributes in this example include:</p>
 <p dir="ltr" class="FM_Bulleted1">•<span style="padding-left: 7pt;" class="FMAutoNumber_1"></span>A set of subject attributes representing the user. These include the user ID, department, roles, and the product area to which the user is assigned.</p>
 <p dir="ltr" class="FM_Bulleted1">•<span style="padding-left: 7pt;" class="FMAutoNumber_1"></span>A set of resource attributes representing the Support ticket. These include the ticket ID, priority, and severity; the product affected by the ticket; the ticket category; the user assigned to the ticket; and the user who created the ticket.</p>
 <p dir="ltr" class="FM_Bulleted1">•<span style="padding-left: 7pt;" class="FMAutoNumber_1"></span>Environment attributes. These include how the user authenticated to the Helpdesk sam&#173;ple application, either multi-factor or http-basic.</p>
 <p dir="ltr" class="FM_Body2">The authorization request also includes the action (operation) the user is trying to perform on the Support ticket (the resource): view, edit, or reassign.</p>
 <p dir="ltr" class="FM_NumBody"><span style="padding-left: 5pt;" class="FMAutoNumber_1"></span>3<span style="padding-left: 16pt;" class="FMAutoNumber_2"></span>The Helpdesk sample application (PEP) submits the authorization request along with the user, resource, and environment attributes, and the requested action, to the CloudAz REST API over HTTPS.</p>
 <p dir="ltr" class="FM_NumBody"><span style="padding-left: 5pt;" class="FMAutoNumber_1"></span>4<span style="padding-left: 16pt;" class="FMAutoNumber_2"></span>The CloudAz service (PDP) receives and evaluates the request and calculates the policy decision.</p>
 <p dir="ltr" class="FM_NumBody"><span style="padding-left: 5pt;" class="FMAutoNumber_1"></span>5<span style="padding-left: 16pt;" class="FMAutoNumber_2"></span>The policy decision, Allow, Deny, or Indeterminate, is returned to the Helpdesk applica&#173;tion. </p>
 <p dir="ltr" class="FM_Body2">Allow and Deny policy decisions are self-explanatory. </p>
 <p dir="ltr" class="FM_Body2">Indeterminate responses, however, indicate that an Allow or Deny decision could not be made, because the attributes and actions do not match any policies. Application PEPs must be designed to interpret Indeterminate authorizations. If application PEPs take a secure-by-default posture, Indeterminate responses are treated as Deny responses. This ensures that users are allowed to see and do only those things they are explicitly permitted to do according to policy, and nothing else.</p>
 <p dir="ltr" class="FM_Body2">In a real-world example, the application PEP would enforce the authorization decision by either allowing or denying the action. In this example, however, the Helpdesk sample application simply prints the policy decision received from the CloudAz service on the screen. </p>
 <p dir="ltr" class="FM_NumBody"><span style="padding-left: 5pt;" class="FMAutoNumber_1"></span>6<span style="padding-left: 16pt;" class="FMAutoNumber_2"></span>In addition to a policy decision, the response from the CloudAz service might also include an optional set of obligations. Obligations are instructions the application must process before enforcing the policy decision. Obligations might include:</p>
 <p dir="ltr" class="FM_Bulleted1">•<span style="padding-left: 7pt;" class="FMAutoNumber_1"></span>Messages to be displayed to users explaining why actions are denied.</p>
 <p dir="ltr" class="FM_Bulleted1">•<span style="padding-left: 7pt;" class="FMAutoNumber_1"></span>Instructions to record sensitive actions in a log, even when those actions are allowed.</p>
 <p dir="ltr" class="FM_Bulleted1">•<span style="padding-left: 7pt;" class="FMAutoNumber_1"></span>Email to be sent to managers when users perform specified actions.</p>
 <p dir="ltr" class="FM_Body2">More advanced obligations could include conditions to be appended to a query before it runs against the database. This ensures that users only view records that match the condi&#173;tions in the obligation.</p>
 <p dir="ltr" class="FM_Heading1Preface"><a name="TOC_About_sample"></a><a name="XREF_62649_About_sample"></a>About sample authorization policies</p>
 <p dir="ltr" class="FM_Body">The sample authorization policies, which are available for import, represent security, business, and regulatory requirements. For the Helpdesk sample application, the application owner, or the security and compliance officer, has decided that the following requirements must be met when users access Support tickets:</p>
 <p dir="ltr" class="FM_NumBody1"><span style="padding-left: 5pt;" class="FMAutoNumber_1"></span>1 <span style="padding-left: 13pt;" class="FMAutoNumber_2"></span>Users in the IT department are allowed to view all Support tickets.</p>
 <p dir="ltr" class="FM_NumBody"><span style="padding-left: 5pt;" class="FMAutoNumber_1"></span>2<span style="padding-left: 16pt;" class="FMAutoNumber_2"></span>Users in the IT department are only allowed to edit and reassign Support tickets for their own product area.</p>
 <p dir="ltr" class="FM_NumBody"><span style="padding-left: 5pt;" class="FMAutoNumber_1"></span>3<span style="padding-left: 16pt;" class="FMAutoNumber_2"></span>Users are not allowed to view, edit, or reassign Support tickets flagged as security vulnera&#173;bilities, unless the ticket is either assigned to, or created by, the user. Users should be noti&#173;fied of any policy violations with information on who is currently assigned to the ticket.</p>
 <p dir="ltr" class="FM_Heading2Preface"><a name="TOC_About_sample1"></a>About sample authorization requests and decisions</p>
 <p dir="ltr" class="FM_Body">The sample application issues four different authorization requests to represent the following use cases and scenarios:</p>
 <p dir="ltr" class="FM_NumBody1"><span style="padding-left: 5pt;" class="FMAutoNumber_1"></span>1 <span style="padding-left: 13pt;" class="FMAutoNumber_2"></span>Chris Webber, a user in the IT department, tries to view a Support ticket related to the SharePoint product area. For the sample code, see the .java or .js version of <span class="FM_Code">AllowITDep&#173;tUsersToViewTickets.java</span>.</p>
 <p dir="ltr" class="FM_NumBodyCont">Authorization decision: The CloudAz authorization service evaluates the request and responds with an Allow decision because the request matches the <span class="FM_Emphasis">Allow Users in IT to View All Support Tickets</span> policy and requirement 1) defined in the previous section.</p>
 <p dir="ltr" class="FM_NumBody"><span style="padding-left: 5pt;" class="FMAutoNumber_1"></span>2<span style="padding-left: 16pt;" class="FMAutoNumber_2"></span>Chris Webber, a user in the IT department responsible for the Exchange email server, tries to edit a Support ticket related to issues with the Exchange server. For the sample code, see the .java or .js version of <span class="FM_Code">AllowUsersToEditTktsAssignedToThem</span>.</p>
 <p dir="ltr" class="FM_NumBodyCont">Authorization Decision: The CloudAz authorization service evaluates the request and responds with an Allow decision because the request matches the <span class="FM_Emphasis">Allow Users in IT to Edit and Reassign Tickets in their Product Area</span> policy and requirement 2) defined in the previ&#173;ous section.</p>
 <p dir="ltr" class="FM_NumBody"><span style="padding-left: 5pt;" class="FMAutoNumber_1"></span>3<span style="padding-left: 16pt;" class="FMAutoNumber_2"></span>Chris Webber, a user in the IT department responsible for the Exchange email server, now tries to view a Support ticket categorized as a security issue. For the sample code, see the .java or .js version of <span class="FM_Code">DenyUsersAccessToSecurityTkts</span>.</p>
 <p dir="ltr" class="FM_NumBodyCont">Authorization Decision: The CloudAz authorization service evaluates the request and responds with a Deny decision based on the <span class="FM_Emphasis">Deny access to Security Vulnerabilities if not Created By or Assigned To the User</span>&#160;policy and requirement 3) defined in <a href="#XREF_62649_About_sample">About sample authorization policies</a>. </p>
 <p dir="ltr" class="FM_NumBodyCont">If the CloudAz policy engine (PDP) finds Allow as well as Deny policies that match a request, the authorization decision is generally Deny, because Deny policies override Allow policies. In this example, Chris is denied access even though the Support ticket is for an issue with the Exchange server and she works in the IT department. The ticket is catego&#173;rized as a security issue and not created by, or assigned to, Chris. </p>
 <p dir="ltr" class="FM_NumBodyCont">In addition to the policy decision, the response from the CloudAz service also contains an obligation the Helpdesk sample application must process as part of policy enforcement. In this example, the obligation includes a message that must be displayed to the user with the reason for denying access. The message also includes the user assigned to the ticket and the ticket ID.</p>
 <p dir="ltr" class="FM_NumBody"><span style="padding-left: 5pt;" class="FMAutoNumber_1"></span>4<span style="padding-left: 16pt;" class="FMAutoNumber_2"></span>Chris Webber, a user in the Marketing department, tries to view a Support ticket related to the Exchange server. For the sample code, see the .java or .js version of <span class="FM_Code">NoMatchingPoli&#173;cyFound</span>.</p>
 <p dir="ltr" class="FM_NumBodyCont">Authorization Decision: The CloudAz authorization service evaluates the request and responds with an Indeterminate response, because no policies in the system match Chris and users in the Marketing department. </p>
 <p dir="ltr" class="FM_NumBodyCont">As discussed earlier, the Helpdesk sample application must determine how to handle Inde&#173;terminate responses. A secure-by-default system would treat this as a Deny decision and not allow Chris to view the Support ticket. </p>
 <p dir="ltr" class="FM_Body">For more information about authorization policies, requests, and CloudAz components such as PDPs and PEPs, see the CloudAz Overview section of the online Help.</p>
 <p dir="ltr" class="FM_Heading1Preface"><a name="TOC_Take_it_for_a_spin"></a>Take it for a spin</p>
 <p dir="ltr" class="FM_Body">It's time to get your feet wet. You can modify the sample code and policies to see how changes affect the policy decisions returned from the CloudAz service. </p>
 <p dir="ltr" class="FM_Note"><span class="FM_Bold">Note:<span style="padding-left: 19pt;" class="FMAutoNumber_1"></span> </span>When you make changes, you must run the sample application to see the results. See <a href="#XREF_75732_Run_the">Run the application and send an authorization request</a>.</p>
 <p dir="ltr" class="FM_Body">Suggested changes:</p>
 <p dir="ltr" class="FM_NumBody1"><span style="padding-left: 5pt;" class="FMAutoNumber_1"></span>1 <span style="padding-left: 13pt;" class="FMAutoNumber_2"></span>Change the user's <span class="FM_Emphasis">departmen</span>t attribute to <span class="FM_Emphasis">IT</span>&#160;in the .java or .js version of <span class="FM_Code">NoMatchingPol&#173;icyFound </span>and run the sample application again. What was the policy decision this time? If it changed, why?</p>
 <p dir="ltr" class="FM_NumBodyCont" style="font-weight : bold;"><span class="FM_Bold">Answer</span></p>
 <p dir="ltr" class="FM_NumBodyCont">Instead of Indeterminate, the CloudAz service now returns an Allow policy decision as any user in the IT department is allowed to view Support tickets based on the policy, <span class="FM_Emphasis">Allow Users in IT to View All Support Tickets</span>.</p>
 <p dir="ltr" class="FM_NumBody"><span style="padding-left: 5pt;" class="FMAutoNumber_1"></span>2<span style="padding-left: 16pt;" class="FMAutoNumber_2"></span>Change the <span class="FM_Emphasis">created_by</span>&#160;resource attribute to <span class="FM_Emphasis">chris.webber</span>&#160;in the .java or .js version of &#160;<span class="FM_Code">DenyUserAccessToSecurityTks</span> and run the sample application again. What was the pol&#173;icy decision this time? If it changed, why?</p>
 <p dir="ltr" class="FM_NumBodyCont" style="font-weight : bold;"><span class="FM_Bold">Answer</span></p>
 <p dir="ltr" class="FM_NumBodyCont">CloudAz now returns an Allow policy decision. Since the security-related Support ticket is now assigned to the user, the <span class="FM_Emphasis">Deny access to Security Vulnerabilities if not Created By or Assigned To the User</span>&#160;policy no longer matches the request. <span class="FM_Emphasis">Allow Users in IT to View All Support Tickets</span>&#160;is now the only policy matching the request. </p>
 <p dir="ltr" class="FM_NumBody"><span style="padding-left: 5pt;" class="FMAutoNumber_1"></span>3<span style="padding-left: 16pt;" class="FMAutoNumber_2"></span>Change the <span class="FM_Emphasis">product area assignment user</span>&#160;attribute to <span class="FM_Emphasis">SharePoint</span>&#160;in the .java or .js version of <span class="FM_Code">AllowUsersToEditTktsAssignedToThem</span>&#160;and run the sample application again. What was the policy decision this time? If it changed, why?</p>
 <p dir="ltr" class="FM_NumBodyCont" style="font-weight : bold;"><span class="FM_Bold">Answer</span></p>
 <p dir="ltr" class="FM_NumBodyCont">Instead of Allow, the CloudAz service now returns an Indeterminate policy response because there are no policies that match the request. Users in the IT department can edit tickets only if the users are assigned to the same product area as the ticket. There are no policies that describe what should happen if the user tries to edit a ticket assigned to a dif&#173;ferent product area than the user.</p>
 <p dir="ltr" class="FM_NumBodyCont">Now change the <span class="FM_Emphasis">category</span>&#160;resource attribute to <span class="FM_Emphasis">security</span>&#160;and see what happens when you run the sample application. The policy decision changes to Deny based on the policy, <span class="FM_Emphasis">Deny access to Security Vulnerabilities if not Created By or Assigned To the User</span>.</p>
 <p dir="ltr" class="FM_Heading1Preface"><a name="TOC_About_the_Policy_Model"></a>About the Policy Model</p>
 <p dir="ltr" class="FM_Body">NextLabs CloudAz provides an easy to use, guided, policy authoring experience. Authorization policies are based on named subject and resource components that define a set of attribute con&#173;ditions such as <span class="FM_Emphasis">Age &gt; 21</span>&#160;or <span class="FM_Emphasis">Document Status = Public</span>. Components can be defined once and used in multiple policies. Any changes made to a component, once that component is activated, auto&#173;matically take effect across all policies that reference the component. </p>
 <p dir="ltr" class="FM_Body">The three sample policies in the QuickStart example are based on two resource components:</p>
 <p dir="ltr" class="FM_Bulleted">•<span style="padding-left: 7pt;" class="FMAutoNumber_1"></span><span class="FM_Bold">Security Vulnerabilities</span> which represents Support tickets categorized as security issues</p>
 <p dir="ltr" class="FM_Bulleted">•<span style="padding-left: 7pt;" class="FMAutoNumber_1"></span><span class="FM_Bold">Tickets in User's Product Area</span>&#160;which represents Support tickets that match the product area assignment of the user</p>
 <p dir="ltr" class="FM_Body">The sample policies also reference a subject component named <span class="FM_Emphasis">IT Department</span>&#160;that defines the attributes and conditions representing users that belong to IT. Each component includes one or more conditions comparing resource attributes against either literal values or other attributes.</p>
 <p dir="ltr" class="FM_Body">Components in turn are based on subject types and resource types defined in the CloudAz Policy Model. CloudAz includes a default User subject type in the Policy Model. The User subject type, which can be updated to include any user attributes that the policy system should be aware of, is available to administrators when they define the subject components used to grant or deny access. In the Helpdesk example, the User subject type has been extended to include user attri&#173;butes representing the user ID, the department a user belongs to, the product area the user is responsible for, and the roles assigned to the user. A role is simply another User (subject type) attribute that you can base your policies on in an ABAC system such as CloudAz.</p>
 <p dir="ltr" class="FM_Body">A resource type defines a set of metadata representing a category of protected objects in your application. Examples of resource types include Support tickets, customer records, and docu&#173;ments. Resource type metadata includes the resource attributes, actions, and obligations that are used by administrators, the CloudAz policy system, and the application (PEP) when authoring, evaluating, and enforcing policies.</p>
 <p dir="ltr" class="FM_Body">The Helpdesk example includes a resource type named Support Tickets. This resource type defines the resource attributes (ticket ID, priority, severity, product area, issue category, assigned to, and created by), their datatypes, and the allowable values that are presented to pol&#173;icy administrators. These are passed at runtime to the CloudAz service by the Helpdesk sample application and used by the CloudAz PDP to evaluate authorization requests.</p>
 <p dir="ltr" class="FM_Body">The Support Tickets resource type also includes the actions, such as view, edit, and reassign, to be controlled in the Helpdesk sample application. Whenever the Helpdesk sample application requests an authorization decision from the CloudAz service, it includes, as part of the authoriza&#173;tion request, the action (operation) the user is trying to perform on a Support ticket.</p>
 <p dir="ltr" class="FM_Body">Last but not least, the resource type also defines the name and parameters for any obligations to be defined in Support ticket policies and enforced in the Helpdesk sample application. At run&#173;time the CloudAz policy engine returns an optional list of obligations with the final policy deci&#173;sion (based on the effective policies that match the authorization request at runtime) to further affect policy enforcement in the Helpdesk sample application. In this example the Support Tick&#173;ets resource type includes the definition and structure of a Policy Violation Notification obliga&#173;tion that includes three parameters (<span class="FM_Emphasis">ticket_id</span>, <span class="FM_Emphasis">message</span>, and <span class="FM_Emphasis">assigned_to</span>). CloudAz administrators who author policies related to Support tickets can, as part of the policy, define a message that should be presented to the end user when a given policy is enforced. This is the obligation included in the policy example, <span class="FM_Emphasis">Deny access to Security Vulnerabilities if not Created By or Assigned To the User</span>. The <span class="FM_Emphasis">ticket_id</span>&#160;and <span class="FM_Emphasis">assigned_to</span> attributes included in the authoriza&#173;tion request are also returned as part of the obligation so that the application can include these in the message to the user.</p>
 <p dir="ltr" class="FM_Heading1Preface"><a name="TOC_Creating_components_and"></a>Creating components and policies</p>
 <p dir="ltr" class="FM_Body">To demonstrate how resource types drive the policy and component authoring experience, you can create a new resource component and policy that allows users to view any Support tickets they have created.</p>
 <p dir="ltr" class="FM_HeadingProcedure">Procedure</p>
 <p dir="ltr" class="FM_NumBody1"><span style="padding-left: 5pt;" class="FMAutoNumber_1"></span>1 <span style="padding-left: 13pt;" class="FMAutoNumber_2"></span>Log in to the CloudAz service using the URL and credentials provided in the <span class="FM_Emphasis">Welcome</span>&#160;email from NextLabs.</p>
 <p dir="ltr" class="FM_NumBody"><span style="padding-left: 5pt;" class="FMAutoNumber_1"></span>2<span style="padding-left: 16pt;" class="FMAutoNumber_2"></span>Create a new resource component:</p>
 <p dir="ltr" class="FM_NumBodySub1">a<span style="padding-left: 4pt;" class="FMAutoNumber_1"></span>On the left navigation bar, select <span class="FM_UIControl">Components &gt; Resource</span>, then select Add Component.</p>
 <p dir="ltr" class="FM_NumBodySub">b<span style="padding-left: 4pt;" class="FMAutoNumber_1"></span>In the <span class="FM_Emphasis">Name</span>&#160;field, type <span class="FM_UserInput">My Own Support Tickets</span>.</p>
 <p dir="ltr" class="FM_NumBodySub">c<span style="padding-left: 5pt;" class="FMAutoNumber_1"></span>Select the Support Tickets resource type.</p>
 <p dir="ltr" class="FM_NumBodySub">d<span style="padding-left: 4pt;" class="FMAutoNumber_1"></span>Add the following condition: <span class="FM_UserInput">Created By = $(user.user_id)</span></p>
 <p dir="ltr" class="FM_NumBodySubCont">This condition compares the resource attribute <span class="FM_Emphasis">created_by</span>&#160;against the <span class="FM_Emphasis">user_id</span>&#160;subject attribute. Note that the left side <span class="FM_Emphasis">Name</span>&#160;field in the condition editor lists the attributes defined in the Support Tickets resource type. An upcoming build of the CloudAz service will also enable you to select user and resource attributes from a list in the right-hand <span class="FM_Emphasis">Value</span> field in addition to selecting them on the component form. Note that multiple con&#173;ditions in a component are treated as AND statements by the CloudAz PDP.</p>
 <p dir="ltr" class="FM_NumBodySub">e<span style="padding-left: 4pt;" class="FMAutoNumber_1"></span>Save and deploy the component.</p>
 <p dir="ltr" class="FM_NumBody"><span style="padding-left: 5pt;" class="FMAutoNumber_1"></span>3<span style="padding-left: 16pt;" class="FMAutoNumber_2"></span>Create a new policy: </p>
 <p dir="ltr" class="FM_NumBodySub1">a<span style="padding-left: 4pt;" class="FMAutoNumber_1"></span>On the left navigation bar, click <span class="FM_UIControl">Policies</span>, then click <span class="FM_UIControl">Add Policy</span>.</p>
 <p dir="ltr" class="FM_NumBodySub">b<span style="padding-left: 4pt;" class="FMAutoNumber_1"></span>In the <span class="FM_Emphasis">Name</span>&#160;field, type <span class="FM_UserInput">Allow users to view their own Support tickets.</span></p>
 <p dir="ltr" class="FM_NumBodySub">c<span style="padding-left: 5pt;" class="FMAutoNumber_1"></span>Define the policy as an Allow policy.</p>
 <p dir="ltr" class="FM_NoteImportant"><span class="FM_ImportantEmphasis">Important:<span style="padding-left: 2pt;" class="FMAutoNumber_1"></span> </span>Do not add any subject components to the policy. An empty subject component field means that the policy applies to any and all users. </p>
 <p dir="ltr" class="FM_NumBodySub">d<span style="padding-left: 4pt;" class="FMAutoNumber_1"></span>Add the <span class="FM_Emphasis">My Own Support Tickets</span>&#160;resource component you created earlier to the policy. </p>
 <p dir="ltr" class="FM_NumBodySubCont">After adding the resource component, note that the bottom of the CloudAz policy was updated with the list of obligations defined in the Support Tickets resource type. In a real-world scenario, the Policy Violation Message obligation defined here probably applies to Deny policies only, but can be enabled if desired. </p>
 <p dir="ltr" class="FM_NumBodySub">e<span style="padding-left: 4pt;" class="FMAutoNumber_1"></span>Add the <span class="FM_Emphasis">View</span>&#160;action component to the policy. Note that the actions in the list are restricted based on the previously selected resource components and the corresponding resource type(s). </p>
 <p dir="ltr" class="FM_NumBodySub">f<span style="padding-left: 6pt;" class="FMAutoNumber_1"></span>Save and deploy the policy.</p>
 <p dir="ltr" class="FM_NumBody"><span style="padding-left: 5pt;" class="FMAutoNumber_1"></span>4<span style="padding-left: 16pt;" class="FMAutoNumber_2"></span>On the left navigation bar, click <span class="FM_UIControl">Dashboard</span>&#160;and refresh the screen until the outer circle in the top left <span class="FM_Emphasis">System Configuration Status</span>&#160;widget turns blue. </p>
 <p dir="ltr" class="FM_NumBodyCont">Blue indicates that the new policy and component has been activated and distributed to the CloudAz PDPs and is available for runtime policy evaluation. The PDPs, which are run&#173;ning on a separate set of distributed servers, ping the CloudAz policy server (Policy Admin&#173;istration Point, or PAP for short) at regular intervals, typically once a minute, to obtain new or updated policies and components. </p>
 <p dir="ltr" class="FM_NumBodyCont">Voila! Users are now allowed to view their own Support tickets in the Helpdesk sample application. You can demonstrate this by modifying the user and resource attributes in one of the included sample applications. </p>
 </body>
</html>